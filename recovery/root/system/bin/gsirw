#!/system/bin/sh

export DEFAULT_SYSTEM_NAME="system"
export DEFAULT_VENDOR_NAME="vendor"
export DEFAULT_PRODUCT_NAME="product"
export DEFAULT_ODM_NAME="odm"
export CUSTOM_SYSTEM_NAME="$DEFAULT_SYSTEM_NAME"
export CUSTOM_VENDOR_NAME="$DEFAULT_VENDOR_NAME"
export CUSTOM_PRODUCT_NAME="$DEFAULT_PRODUCT_NAME"
export CUSTOM_ODM_NAME="$DEFAULT_ODM_NAME"

RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No color

DEVICE_NAME=$(getprop ro.product.system.device)
DEVICE_MODEL=$(getprop ro.product.system.model)
SOC=$(getprop ro.product.board)

perform_resize_and_unshare_blocks() {
    resize2fs "$image_path/system.img" 6G
    e2fsck -E unshare_blocks "$image_path/system.img"
    resize2fs -M "$image_path/system.img"
}

generate_random_message() {
    cat /dev/urandom | tr -dc 'a-zA-Z0-9' | head -c 32
}

simulate_bootloader_patch() {
    echo -e "${NC}Generating specialized patch keys for $DEVICE_MODEL${NC}"
    echo -e "${NC}Modifying kernel for library adjustment${NC}"
    echo -e "${NC}Proceeding with the process for user adaptation${NC}"
    sleep 3
    echo -e "${BLUE}Attempting to remove security patches from $DEVICE_NAME's Bootloader"
    echo -e "${GREEN}Removal successful."
    sleep 3
}

prank() {
	clear
	echo -e "${GREEN}Initializing attempt to remove Bootloader security patches on ${DEVICE_NAME}...${NC}"
	simulate_bootloader_patch

	echo ""
	echo -e "${RED}-----------------------------------------------------------"
	echo -e "${RED}ERROR: A critical problem has been detected in the system.${NC}"
	echo -e "${RED}Please do not turn off the device and wait for instructions.${NC}"
	echo -e "${RED}-----------------------------------------------------------"
	echo ""

	echo -e "Bootloader SOC Log: ${RED}$(generate_random_message)${NC}"
	echo -e "${RED}Checking total integrity of SELinux${NC}"
	sleep 2
	echo -e "${RED}Failed: Do not restart your device${NC}"
	echo -e "${RED}Please press any key to try to repair your device${NC}"
	read -rsn1

	echo 1 > /sys/class/graphics/fb0/blank

	sleep 10

	echo 0 > /sys/class/graphics/fb0/blank

	reboot
}


set_partition_names() {
    clear
    echo "Partition Names Configuration:"
    echo "1. System partition name: $CUSTOM_SYSTEM_NAME"
    echo "2. Vendor partition name: $CUSTOM_VENDOR_NAME"
    echo "3. Product partition name: $CUSTOM_PRODUCT_NAME"
    echo "4. ODM partition name: $CUSTOM_ODM_NAME"
    echo "5. Restore default values"
    echo "6. Save and exit"
    echo "Select the partition number you want to modify (or 'q' to quit):"

    read -rsn1 input

    case "$input" in
        "q")
            clear
            exit 0
            ;;
        "1")
            echo -n "New name for system partition (current: $CUSTOM_SYSTEM_NAME): "
            read -r CUSTOM_SYSTEM_NAME
            ;;
        "2")
            echo -n "New name for vendor partition (current: $CUSTOM_VENDOR_NAME): "
            read -r CUSTOM_VENDOR_NAME
            ;;
        "3")
            echo -n "New name for product partition (current: $CUSTOM_PRODUCT_NAME): "
            read -r CUSTOM_PRODUCT_NAME
            ;;
        "4")
            echo -n "New name for ODM partition (current: $CUSTOM_ODM_NAME): "
            read -r CUSTOM_ODM_NAME
            ;;
        "5")
            CUSTOM_SYSTEM_NAME="$DEFAULT_SYSTEM_NAME"
            CUSTOM_VENDOR_NAME="$DEFAULT_VENDOR_NAME"
            CUSTOM_PRODUCT_NAME="$DEFAULT_PRODUCT_NAME"
            CUSTOM_ODM_NAME="$DEFAULT_ODM_NAME"
            ;;
        "6")
            save_and_exit
            ;;
    esac
}

load_saved_configurations() {
    local config_file="/cache/recovery.conf"
    if [ -f "$config_file" ]; then
        source "$config_file"
    else
        config_file="$HOME/recovery.conf"
        if [ -f "$config_file" ]; then
            source "$config_file"
        else
            echo "No saved configurations found."
        fi
    fi
}

save_configurations() {
    local config_file="/cache/recovery.conf"
    if [ -w "/cache" ]; then
        echo "Saving configurations to $config_file..."
        {
            echo "# Recovery configurations"
            echo "export CUSTOM_SYSTEM_NAME=\"$CUSTOM_SYSTEM_NAME\""
            echo "export CUSTOM_VENDOR_NAME=\"$CUSTOM_VENDOR_NAME\""
            echo "export CUSTOM_PRODUCT_NAME=\"$CUSTOM_PRODUCT_NAME\""
            echo "export CUSTOM_ODM_NAME=\"$CUSTOM_ODM_NAME\""
            echo "export A_B=\"$A_B\""
            echo "export A_O=\"$A_O\""
            echo "export DYNAMIC=\"$DYNAMIC\""
            echo "export GENERIC=\"$GENERIC\""
            echo "export DEVICE_MAPPER=\"$DEVICE_MAPPER\""
            echo "export CUSTOM_MOUNT_POINT=\"$CUSTOM_MOUNT_POINT\""
        } >"$config_file"
    else
        config_file="$HOME/recovery.conf"
        echo "Saving configurations to $config_file..."
        {
            echo "# Recovery configurations"
            echo "export CUSTOM_SYSTEM_NAME=\"$CUSTOM_SYSTEM_NAME\""
            echo "export CUSTOM_VENDOR_NAME=\"$CUSTOM_VENDOR_NAME\""
            echo "export CUSTOM_PRODUCT_NAME=\"$CUSTOM_PRODUCT_NAME\""
            echo "export CUSTOM_ODM_NAME=\"$CUSTOM_ODM_NAME\""
            echo "export A_B=\"$A_B\""
            echo "export A_O=\"$A_O\""
            echo "export DYNAMIC=\"$DYNAMIC\""
            echo "export GENERIC=\"$GENERIC\""
            echo "export DEVICE_MAPPER=\"$DEVICE_MAPPER\""
            echo "export CUSTOM_MOUNT_POINT=\"$CUSTOM_MOUNT_POINT\""
        } >"$config_file"
    fi
}

configure_manually() {
    while true; do
        clear
        echo "Manual Configuration:"
        echo "1. Set A/B or A Only flags"
        echo "2. Choose Device Mapper or other parameters"
        echo "3. Customize mount point"
        echo "4. Done"
        echo "5. Enable super secret settings in $SOC"
        echo ""
        echo -n "Enter your choice (1-5): "
        read -rsn1 choice
        echo ""

        case $choice in
            1)
                while true; do
                    clear
                    echo "Set A/B or A Only flags:"
                    echo "a. A/B"
                    echo "b. A Only"
                    echo "c. Go back"
                    echo ""
                    echo -n "Enter your choice (a/b/c): "
                    read -rsn1 flag_choice
                    echo ""

                    case $flag_choice in
                        a)
                            export A_B="true"
                            export A_O="false"
                            break
                            ;;
                        b)
                            export A_B="false"
                            export A_O="true"
                            break
                            ;;
                        c)
                            break
                            ;;
                        *)
                            echo "Invalid choice. Press any key to try again..."
                            read -rsn1
                            ;;
                    esac
                    save_configurations
                done
                ;;
            2)
                while true; do
                    clear
                    echo "Choose Device Mapper or other parameters:"
                    echo "a. Device Mapper"
                    echo "b. Generic By-Name"
                    echo "c. Other parameters"
                    echo "d. Go back"
                    echo ""
                    echo -n 'Enter your choice (a/b/c/d):'
                    read -rsn1 param_choice
                    echo ""
                    
                    case $param_choice in
                        a)
                            export DYNAMIC="true"
                            export GENERIC="false"
                            export DEVICE_MAPPER="/dev/block/mapper"
                            break
                            ;;
                        b)
                            export DYNAMIC="false"
                            export GENERIC="true"
                            export DEVICE_MAPPER="/dev/block/by-name"
                            break
                            ;;
                        c)
                            echo "Custom parameters configuration."
                            echo "Press any key to continue..."
                            read -rsn1
                            set_partition_names
                            break
                            ;;
                        d)
                            break
                            ;;
                        *)
                            echo "Invalid choice. Press any key to try again..."
                            read -rsn1
                            ;;
                    esac
                    save_configurations
                done
                ;;
            3)
                while true; do
                    clear
                    echo "Customize mount point:"
                    echo "Enter custom mount point (or leave empty to cancel):"
                    echo -n "> "
                    read -r custom_mount_point

                    if [ -z "$custom_mount_point" ]; then
                        export CUSTOM_MOUNT_POINT="/cache/system"
                        echo "Mount point cannot be empty. Setting default in /cache/system"
                        echo "Press any key to continue..."
                        read -rsn1
                        break
                    else
                        export CUSTOM_MOUNT_POINT="$custom_mount_point"
                        echo "Mount point set to: $CUSTOM_MOUNT_POINT"
                        echo "Press any key to continue..."
                        read -rsn1
                        break
                    fi
                    save_configurations
                done
                ;;
            4)
                save_configurations
                break
                ;;
            5)
                prank
                ;;
            *)
                echo "Invalid choice. Press any key to try again..."
                read -rsn1
                ;;
        esac
    done
}

perform_resize_and_unshare_blocks_v2() {
    resize2fs "$found_dir/system.img" 6G
    e2fsck -E unshare_blocks "$found_dir/system.img"
    resize2fs -M "$found_dir/system.img"
}

perform_ota() {
	local image="$1"
    resize2fs "$image" 7G
    e2fsck -E unshare_blocks "$image"
    resize2fs -M "$image"
}

ask() {
	echo "Press any key to continue..."
	read -rsn1
}

identify_device() {
    if [ -z "$DYNAMIC" ] || [ -z "$GENERIC" ] || [ -z "$DEVICE_MAPPER" ] || [ -z "$A_B" ] || [ -z "$A_O" ]; then
        if ls /dev/block/mapper >/dev/null 2>&1; then
            export DYNAMIC="true"
            export GENERIC="false"
            export DEVICE_MAPPER="/dev/block/mapper"
        elif ls /dev/block/by-name >/dev/null 2>&1; then
            export DYNAMIC="false"
            export GENERIC="true"
            export DEVICE_MAPPER="/dev/block/by-name"
        else
            exit 1
        fi

        if ls "$DEVICE_MAPPER" | grep -q "system_a"; then
            export A_B="true"
            export A_O=""
        elif ls "$DEVICE_MAPPER" | grep -q "system"; then
            export A_B=""
            export A_O="true"
        else
            exit 1
        fi
    fi
}

extract_image_from_archive() {
    local archive="$1"
    local extracted_dir="$(dirname "$archive")/extracted"
    mkdir -p "$extracted_dir"
    
    echo "Extracting $archive..."
    case "$archive" in
        *.zip)
            unzip "$archive" -d "$extracted_dir"
            ;;
        *.tar.gz | *.tgz)
            gunzip -c "$archive" | tar -xf - -C "$extracted_dir"
            ;;
        *.tar.xz | *.xz)
            xz -d "$archive" -c > "$extracted_dir/$(basename "$archive" .xz)"
            ;;
        *.gz)
            gunzip -k "$archive" -d "$extracted_dir"
            ;;
        *)
            echo "Unsupported archive format: $archive"
            return 1
            ;;
    esac
}

process_image() {
    if [ "$type" = "1" ]; then
      $ask
      local found_dir=$found_dir
      local found_file=$found_file
      original="$found_dir/$found_file"
      new="$found_dir/system.img"
      rename_image "$original" "$new"
      perform_resize_and_unshare_blocks_v2 || echo "Failed to resize and unshare blocks."
      rename_image "$new" "$original"
      confirm_flash_v2
    elif [ "$type" = "4" ]; then
      $ask
      if [ ! -d "$CUSTOM_MOUNT_POINT" ]; then
          mkdir -p "$CUSTOM_MOUNT_POINT"
      fi
      original_file="$found_dir/$found_file" 
      new_name="$found_dir/system.img"
      rename_image "$image_path/$select_file" "$new_name"
      perform_resize_and_unshare_blocks_v2 || echo "Failed to resize and unshare blocks."
      resize2fs "$new_name" 6G
      mount -o loop,rw "$new_name" $CUSTOM_MOUNT_POINT
      echo "Mounted Image On $CUSTOM_MOUNT_POINT to modify"
      echo "Press any key to indicate that you have finished the process... "
      read -rsn4 finish
      e2fsck -f "$new_name"
      resize2fs -M "$new_name"
      umount $CUSTOM_MOUNT_POINT/
      echo "Compressed Image and Removed Montage"
      rename_image "$new_name" "$original_file"
    else
        echo "Invalid TYPE value."
    fi
}

find_image_in_directory() {
    local recent_image_file=$(find "$image_path" -type f -name '*.img' -mmin -5)
    if [ -n "$recent_image_file" ]; then
        export found_dir=$(dirname "$recent_image_file")
        export found_file=$(basename "$recent_image_file")
        echo "Found recent image: $found_file in $found_dir"
        process_image
    else
        echo "No recent image found in $image_path"
    fi
}

list_directories_and_files() {
    directory="$1"
    ls -1p "$directory" | grep -E '/$|.*\.(img|gzip|xz|tar|zip)$' | sed 's:/$::'
}

confirm_flash() {
    echo "Do you want to proceed with flashing the image $original_file? (y/n)"
    read -rsn1 input
    if [ "$input" = "y" ]; then
        if [ "$A_B" = "true" ]; then
            if [ "$GENERIC" = "true" ]; then
                echo "Selected partition type: system (using by-name)"
                dd if="$original_file" of="$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME_a"
                dd if="$original_file" of="$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME_b"
            elif [ "$DYNAMIC" = "true" ]; then
                echo "Selected partition type: system (using device mapper)"
                dd if="$original_file" of="$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME_a"
                dd if="$original_file" of="$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME_b"
            else
                echo "Invalid device type specified."
                exit 1
            fi
        elif [ "$A_O" = "true" ]; then
            if [ "$GENERIC" = "true" ]; then
                echo "Selected partition type: system (using by-name)"
                dd if="$original_file" of="$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME"
            elif [ "$DYNAMIC" = "true" ]; then
                echo "Selected partition type: system (using device mapper)"
                dd if="$original_file" of="$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME"
            else
                echo "Invalid device type specified."
                exit 1
            fi
        else
            echo "Partition type could not be determined."
            exit 1
        fi
    else
        exit 1
    fi
}

confirm_flash_v2() {
    echo "Do you want to proceed with flashing the image $original? (y/n)"
    read -rsn1 input
    if [ "$input" = "y" ]; then
        if [ "$A_B" = "true" ]; then
            if [ "$GENERIC" = "true" ]; then
                echo "Selected partition type: system (using by-name)"
                dd if="$original" of="$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME_a"
                dd if="$original" of="$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME_b"
            elif [ "$DYNAMIC" = "true" ]; then
                echo "Selected partition type: system (using device mapper)"
                dd if="$original" of="$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME_a"
                dd if="$original" of="$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME_b"
            else
                echo "Invalid device type specified."
                exit 1
            fi
        elif [ "$A_O" = "true" ]; then
            if [ "$GENERIC" = "true" ]; then
                echo "Selected partition type: system (using by-name)"
                dd if="$original" of="/dev/block/by-name/$CUSTOM_SYSTEM_NAME"
            elif [ "$DYNAMIC" = "true" ]; then
                echo "Selected partition type: system (using device mapper)"
                dd if="$original" of="$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME"
            else
                echo "Invalid device type specified."
                exit 1
            fi
        else
            echo "Partition type could not be determined."
            exit 1
        fi
    else
        exit 1
    fi
}

rename_image() {
    local original_file="$1"
    local new_name="$2"
    mv "$original_file" "$new_name"
}

user_modification() {
    echo "Enter the full path of the image file or directory (default: /sdcard)"
    echo "Enter '.' to use the default directory."
    echo -n "> "
    read -r image_path

    if [ -z "$image_path" ] || [ "$image_path" = "." ]; then
        image_path="/sdcard"
    fi

    selected_index=1
    selected_symbol=">"
    select_file=""

    while true; do
        clear
        echo "Guide to Move"
        echo ""
        echo "The main operation is with the UP, DOWN, LEFT and RIGHT arrows."
        echo "Also in the style of PC games you can use the WASD keys"
        echo "ARROW-UP=W   ARROW-LEFT=A   ARROW-DOWN=S   ARROW-RIGHT=D"
        echo "                   Q=Exit GSIRW"
        echo ""
        echo "UP : You will go up in the list of Files or Folders" 
        echo "LEFT : You will go to the previous or higher directory"
        echo "RIGHT : Enter folder or select file"
        echo "DOWN : Go down the list of Files or Folders"
        echo ""
        echo "Contents of $image_path:"
        list_directories_and_files "$image_path" | awk -v idx="$selected_index" -v sym="$selected_symbol" '{if (NR<=999) {if (NR==idx) print sym, $0; else print " ", $0} else {if (NR==idx-25) print sym, $0; else print " ", $0}}'

        read -rsn1 input

        case "$input" in
            "q")
                break
                ;;
            $'\x1b')
                read -rsn2 input
                case "$input" in
                    '[A')
                        flag="UP"
                        ;;
                    '[B')
                        flag="DOWN"
                        ;;
                    '[C')
                        flag="RIGHT"
                        ;;
                    '[D')
                        flag="LEFT"
                        ;;
                esac
                ;;
            "W" | "w")
                flag="UP"
                ;;
            "A" | "a")
                flag="LEFT"
                ;;
            "S" | "s")
                flag="DOWN"
                ;;
            "D" | "d")
                flag="RIGHT"
                ;;
        esac

        case "$flag" in
            "UP")
                ((selected_index--))
                if [ "$selected_index" -lt 1 ]; then
                    selected_index=1
                fi
                ;;
            "LEFT")
                image_path=$(dirname "$image_path")
                ;;
            "DOWN")
                total_items=$(list_directories_and_files "$image_path" | wc -l)
                ((selected_index++))
                if [ "$selected_index" -gt "$total_items" ]; then
                    selected_index="$total_items"
                fi
                ;;
            "RIGHT")
                selected_file=$(list_directories_and_files "$image_path" | sed -n "${selected_index}p")
                if [ -d "$image_path/$selected_file" ]; then
                    image_path="$image_path/$selected_file"
                    selected_index=1
                else
                    select_file="$selected_file"
                    compressed_file="$select_file"
                    if [ "${select_file##*.}" = "img" ]; then
                    	$ask
                        if [ ! -d "$CUSTOM_MOUNT_POINT" ]; then
   						 mkdir -p "$CUSTOM_MOUNT_POINT"
						fi
                        original_file="$image_path/$select_file" 
                        new_name="$image_path/system.img"
                        rename_image "$image_path/$select_file" "$new_name"
                        perform_resize_and_unshare_blocks || echo "Failed to resize and unshare blocks."
                        resize2fs "$new_name" 6G
   					 mount -o loop,rw "$new_name" $CUSTOM_MOUNT_POINT
    					echo "Mounted Image On $CUSTOM_MOUNT_POINT to modify"
                        echo "Price to any key to indicate that you have finished the process... "
                        read -rsn4 finish
                        e2fsck -f "$new_name"
                        resize2fs -M "$new_name"
                        umount $CUSTOM_MOUNT_POINT/
                        echo "Compressed Image and Removed Montage"
                        rename_image "$new_name" "$original_file"
                        break
                    elif [ "${compressed_file##*.}" != "zip" ] && [ "${compressed_file##*.}" != "tar.xz" ] && [ "${compressed_file##*.}" != "gz" ] && [ "${compressed_file##*.}" != "xz" ]; then
						$ask
                        echo "Unsupported file format: $compressed_file"
                        continue
                    else
                        $ask
                        extract_image_from_archive "$image_path/$compressed_file"
                        find_image_in_directory
                        break
                    fi
                fi
                ;;
        esac

        if [ "$selected_index" -lt 1 ]; then
            selected_index=1
        fi
    done
}

process_user_selected_image() {
    echo "Enter the full path of the image file or directory (default: /sdcard):"
    echo "Enter '.' to use the default directory."
    echo -n "> "
    read -r image_path

    if [ -z "$image_path" ] || [ "$image_path" = "." ]; then
        image_path="/sdcard"
    fi

    selected_index=1
    selected_symbol=">"
    select_file=""

    while true; do
        clear
        echo "Guide to Move"
        echo ""
        echo "The main operation is with the UP, DOWN, LEFT and RIGHT arrows."
        echo "Also in the style of PC games you can use the WASD keys"
        echo "ARROW-UP=W   ARROW-LEFT=A   ARROW-DOWN=S   ARROW-RIGHT=D"
        echo "                   Q=Exit GSIRW"
        echo ""
        echo "UP : You will go up in the list of Files or Folders" 
        echo "LEFT : You will go to the previous or higher directory"
        echo "RIGHT : Enter folder or select file"
        echo "DOWN : Go down the list of Files or Folders"
        echo ""
        echo "Contents of $image_path:"
        list_directories_and_files "$image_path" | awk -v idx="$selected_index" -v sym="$selected_symbol" '{if (NR<=999) {if (NR==idx) print sym, $0; else print " ", $0} else {if (NR==idx-25) print sym, $0; else print " ", $0}}'

        read -rsn1 input

        case "$input" in
            "q")
                break
                ;;
            $'\x1b')
                read -rsn2 input
                case "$input" in
                    '[A')
                        flag="UP"
                        ;;
                    '[B')
                        flag="DOWN"
                        ;;
                    '[C')
                        flag="RIGHT"
                        ;;
                    '[D')
                        flag="LEFT"
                        ;;
                esac
                ;;
            "W" | "w")
                flag="UP"
                ;;
            "A" | "a")
                flag="LEFT"
                ;;
            "S" | "s")
                flag="DOWN"
                ;;
            "D" | "d")
                flag="RIGHT"
                ;;
        esac

        case "$flag" in
            "UP")
                ((selected_index--))
                if [ "$selected_index" -lt 1 ]; then
                    selected_index=1
                fi
                ;;
            "LEFT")
                image_path=$(dirname "$image_path")
                ;;
            "DOWN")
                total_items=$(list_directories_and_files "$image_path" | wc -l)
                ((selected_index++))
                if [ "$selected_index" -gt "$total_items" ]; then
                    selected_index="$total_items"
                fi
                ;;
            "RIGHT")
                selected_file=$(list_directories_and_files "$image_path" | sed -n "${selected_index}p")
                if [ -d "$image_path/$selected_file" ]; then
                    image_path="$image_path/$selected_file"
                    selected_index=1
                else
                    select_file="$selected_file"
                    compressed_file="$select_file"
                    if [ "${select_file##*.}" = "img" ]; then
                        $ask
                        original_file="$image_path/$select_file" 
                        new_name="$image_path/system.img"
                        rename_image "$image_path/$select_file" "$new_name"
                        perform_resize_and_unshare_blocks || echo "Failed to resize and unshare blocks."
                        rename_image "$new_name" "$original_file"
                        confirm_flash
                        break
                    elif [ "${compressed_file##*.}" != "zip" ] && [ "${compressed_file##*.}" != "tar.xz" ] && [ "${compressed_file##*.}" != "gz" ] && [ "${compressed_file##*.}" != "xz" ]; then
                        $ask
                        echo "Unsupported file format: $compressed_file"
                        continue
                    else
                        $ask
                        extract_image_from_archive "$image_path/$compressed_file"
                        find_image_in_directory
                        break
                    fi
                fi
                ;;
        esac

        if [ "$selected_index" -lt 1 ]; then
            selected_index=1
        fi
    done
}

ota_rw() {
	$ask
    if [ "$A_B" = "true" ]; then
        if [ "$GENERIC" = "true" ]; then
            cp "$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME_a" "/sdcard/system_a.img"
            cp "$DEVICE_MAPPER/$CUSTOM_VENDOR_NAME_a" "/sdcard/vendor_a.img"
            cp "$DEVICE_MAPPER/$CUSTOM_PRODUCT_NAME_a" "/sdcard/product_a.img"
            cp "$DEVICE_MAPPER/$CUSTOM_ODM_NAME_a" "/sdcard/odm_a.img"
        elif [ "$DYNAMIC" = "true" ]; then
            cp "$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME_a" "/sdcard/system_a.img"
            cp "$DEVICE_MAPPER/$CUSTOM_VENDOR_NAME_a" "/sdcard/vendor_a.img"
            cp "$DEVICE_MAPPER/$CUSTOM_PRODUCT_NAME_a" "/sdcard/product_a.img"
            cp "$DEVICE_MAPPER/$CUSTOM_ODM_NAME_a" "/sdcard/odm_a.img"
        else
            echo "Invalid device type specified."
            exit 1
        fi
    elif [ "$A_O" = "true" ]; then
        if [ "$GENERIC" = "true" ]; then
            cp "$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME" "/sdcard/system.img"
            cp "$DEVICE_MAPPER/$CUSTOM_VENDOR_NAME" "/sdcard/vendor.img"
            cp "$DEVICE_MAPPER/$CUSTOM_PRODUCT_NAME" "/sdcard/product.img"
            cp "$DEVICE_MAPPER/$CUSTOM_ODM_NAME" "/sdcard/odm.img"
        elif [ "$DYNAMIC" = "true" ]; then
            cp "$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME" "/sdcard/system.img"
            cp "$DEVICE_MAPPER/$CUSTOM_VENDOR_NAME" "/sdcard/vendor.img"
            cp "$DEVICE_MAPPER/$CUSTOM_PRODUCT_NAME" "/sdcard/product.img"
            cp "$DEVICE_MAPPER/$CUSTOM_ODM_NAME" "/sdcard/odm.img"
        else
            echo "Invalid device type specified."
            exit 1
        fi
    else
        echo "Partition type could not be determined."
        exit 1
    fi
    
    perform_ota "/sdcard/system_a.img"
    perform_ota "/sdcard/vendor_a.img"
    perform_ota "/sdcard/product_a.img"
    perform_ota "/sdcard/odm_a.img"
    
    if [ "$A_B" = "true" ]; then
        if [ "$DYNAMIC" = "true" ]; then
            dd if="/sdcard/system_a.img" of="$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME_a"
            dd if="/sdcard/system_a.img" of="$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME_b"
            dd if="/sdcard/vendor_a.img" of="$DEVICE_MAPPER/$CUSTOM_VENDOR_NAME_a"
            dd if="/sdcard/vendor_a.img" of="$DEVICE_MAPPER/$CUSTOM_VENDOR_NAME_b"
            dd if="/sdcard/product_a.img" of="$DEVICE_MAPPER/$CUSTOM_PRODUCT_NAME_a"
            dd if="/sdcard/product_a.img" of="$DEVICE_MAPPER/$CUSTOM_PRODUCT_NAME_b"
            dd if="/sdcard/odm_a.img" of="$DEVICE_MAPPER/$CUSTOM_ODM_NAME_a"
            dd if="/sdcard/odm_a.img" of="$DEVICE_MAPPER/$CUSTOM_ODM_NAME_b"
        elif [ "$GENERIC" = "true" ]; then
            dd if="/sdcard/system_a.img" of="$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME_a"
            dd if="/sdcard/system_a.img" of="$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME_b"
            dd if="/sdcard/vendor_a.img" of="$DEVICE_MAPPER/$CUSTOM_VENDOR_NAME_a"
            dd if="/sdcard/vendor_a.img" of="$DEVICE_MAPPER/$CUSTOM_VENDOR_NAME_b"
            dd if="/sdcard/product_a.img" of="$DEVICE_MAPPER/$CUSTOM_PRODUCT_NAME_a"
            dd if="/sdcard/product_a.img" of="$DEVICE_MAPPER/$CUSTOM_PRODUCT_NAME_b"
            dd if="/sdcard/odm_a.img" of="$DEVICE_MAPPER/$CUSTOM_ODM_NAME_a"
            dd if="/sdcard/odm_a.img" of="$DEVICE_MAPPER/$CUSTOM_ODM_NAME_b"
        else
            echo "Invalid device type specified."
            exit 1
        fi
    elif [ "$A_O" = "true" ]; then
        if [ "$GENERIC" = "true" ]; then
            dd if="/sdcard/system.img" of="$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME"
            dd if="/sdcard/vendor.img" of="$DEVICE_MAPPER/$CUSTOM_VENDOR_NAME"
            dd if="/sdcard/product.img" of="$DEVICE_MAPPER/$CUSTOM_PRODUCT_NAME"
            dd if="/sdcard/odm.img" of="$DEVICE_MAPPER/$CUSTOM_ODM_NAME"
        elif [ "$DYNAMIC" = "true" ]; then
            dd if="/sdcard/system.img" of="$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME"
            dd if="/sdcard/vendor.img" of="$DEVICE_MAPPER/$CUSTOM_VENDOR_NAME"
            dd if="/sdcard/product.img" of="$DEVICE_MAPPER/$CUSTOM_PRODUCT_NAME"
            dd if="/sdcard/odm.img" of="$DEVICE_MAPPER/$CUSTOM_ODM_NAME"
        else
            echo "Invalid device type specified."
            exit 1
        fi
    else
        echo "Partition type could not be determined."
        exit 1
    fi
}

perform_copied_system_image() {
    if [ "$A_B" = "true" ]; then
        if [ "$GENERIC" = "true" ]; then
            cp "$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME_a" "/sdcard/system_a.img"
        elif [ "$DYNAMIC" = "true" ]; then
            cp "$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME_a" "/sdcard/system_a.img"
        else
            echo "Invalid device type specified."
            exit 1
        fi
    elif [ "$A_O" = "true" ]; then
        if [ "$GENERIC" = "true" ]; then
            cp "$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME" "/sdcard/system.img"
        elif [ "$DYNAMIC" = "true" ]; then
            cp "$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME" "/sdcard/system.img"
        else
            echo "Invalid device type specified."
            exit 1
        fi
    else
        echo "Partition type could not be determined."
        exit 1
    fi
    
perform_resize_and_unshare_blocks || echo "Failed to copy system image and resize/unshare blocks."
    
    if [ "$A_B" = "true" ]; then
        if [ "$DYNAMIC" = "true" ]; then
            dd if="/sdcard/system_a.img" of="$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME_a"
            dd if="/sdcard/system_a.img" of="$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME_b"
        elif [ "$GENERIC" = "true" ]; then
            dd if="/sdcard/system_a.img" of="$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME_a"
            dd if="/sdcard/system_a.img" of="$DEVICE_MAPPER/$CUSTOM_SYSTEM_NAME_b"
        else
            echo "Invalid device type specified."
            exit 1
        fi
    fi    
}

if [ -f "/cache/recovery.conf" ] && grep -q "CUSTOM_MOUNT_POINT=" /cache/recovery.conf; then
    echo ""
fi

if [ -f "$HOME/recovery.conf" ] && grep -q "CUSTOM_MOUNT_POINT=" "$HOME/recovery.conf"; then
    echo ""
fi

if [ -z "$CUSTOM_MOUNT_POINT" ]; then
    export CUSTOM_MOUNT_POINT="/cache/system"
fi

identify_device
load_saved_configurations
echo -e "
          ____ ____ ___
         / ___/ ___|_ _|     _ ____      __
        | |  _\___ \| |_____| '__\ \ /\ / /
        | |_| |___) | |_____| |   \ V  V /
         \____|____/___|    |_|    \_/\_/  
"
echo ""
echo "Select an option:"
echo "1. Process the user-selected image."
echo "2. Process a copy of the installed system image."
echo "3. Process to return the ota in rw."
echo "4. Modify images."
echo "5. Manually configure options."
echo " "
echo -n "Choose one of the 5 options:"
read -rsn5 option
echo ""

if [ -z "$option" ] || [ "$option" = "." ]; then
   option="1"
fi

case $option in
    1)
        type=1
        process_user_selected_image
        ;;
    2)
        perform_copied_system_image
        ;;
    3)
        ota_rw
        ;;
    4)
        type=4
        user_modification
        ;;
    5)
        configure_manually
        ;;
    *)
        echo "Invalid option."
esac