#!/system/bin/sh

perform_resize_and_unshare_blocks() {
    resize2fs "$image_path/system.img" 7G
    e2fsck -E unshare_blocks "$image_path/system.img"
    resize2fs -M "$image_path/system.img"
}

extract_image_from_archive() {
    local archive="$1"
    local extracted_dir="$(dirname "$archive")/extracted"
    mkdir -p "$extracted_dir"
    
    echo "Extracting $archive..."
    case "$archive" in
        *.zip)
            unzip -q "$archive" -d "$extracted_dir"
            ;;
        *.tar.gz | *.tgz)
            tar -xzf "$archive" -C "$extracted_dir"
            ;;
        *.tar.xz | *.xz)
            tar -xJf "$archive" -C "$extracted_dir"
            ;;
        *)
            echo "Unsupported archive format: $archive"
            return 1
            ;;
    esac
}

find_image_in_directory() {
    local directory="$1"
    echo "Searching for image in $directory..."
    local image_file="$(find "$directory" -type f -iname '*.img' | head -n 1)"
    if [ -n "$image_file" ]; then
        echo "Found image: $image_file"
    else
        echo "No image found in $directory"
    fi
}

list_directories_and_files() {
    directory="$1"
    ls -1p "$directory" | grep -E '/$|.*\.(img|gzip|xz|tar|zip)$' | sed 's:/$::'
}

confirm_flash() {
    echo "Do you want to proceed with flashing the image $original_file? (y/n)"
    read -rsn1 input
    if [ "$input" = "y" ]; then
        device_mapper_path="/dev/block/mapper/system"
        echo "Selected partition type: system"
        dd if="$original_file" of="$device_mapper_path"
    else
        exit
    fi
}

rename_image() {
    local original_file="$1"
    local new_name="$2"
    mv "$original_file" "$new_name"
}

process_user_selected_image() {
	echo ""
    echo "Enter the full path of the image file or directory (default: /sdcard):"
    echo "Enter '.' to use the default directory."
    echo -n "> "
    read -r image_path

    if [ -z "$image_path" ] || [ "$image_path" = "." ]; then
        image_path="/sdcard"
    fi

    selected_index=1
    selected_symbol=">"
    select_file=""

    while true; do
        clear
        echo "Guide to Move"
        echo ""
        echo "The main operation is with the UP, DOWN, LEFT and RIGHT arrows."
        echo "Also in the style of PC games you can use the WASD keys"
        echo "ARROW-W=UP   ARROW-A=LEFT   ARROW-S=DOWN   ARROW-D=RIGHT   Q=Exit GSIRW"
        echo ""
        echo "UP : You will go up in the list of Files or Folders" 
        echo "LEFT : You will go to the previous or higher directory"
        echo "RIGHT : Enter folder or select file"
        echo "DOWN : Go down the list of Files or Folders"
        echo ""
        echo "Contents of $image_path:"
        list_directories_and_files "$image_path" | awk -v idx="$selected_index" -v sym="$selected_symbol" '{if (NR<=999) {if (NR==idx) print sym, $0; else print " ", $0} else {if (NR==idx-25) print sym, $0; else print " ", $0}}'

        read -rsn1 input

        case "$input" in
            "q")
                break
                ;;
            $'\x1b')
                read -rsn2 input
                case "$input" in
                    '[A')
                        flag="UP"
                        ;;
                    '[B')
                        flag="DOWN"
                        ;;
                    '[C')
                        flag="RIGHT"
                        ;;
                    '[D')
                        flag="LEFT"
                        ;;
                esac
                ;;
            "W" | "w")
                flag="UP"
                ;;
            "A" | "a")
                flag="LEFT"
                ;;
            "S" | "s")
                flag="DOWN"
                ;;
            "D" | "d")
                flag="RIGHT"
                ;;
        esac

        case "$flag" in
            "UP")
                ((selected_index--))
                if [ "$selected_index" -lt 1 ]; then
                    selected_index=1
                fi
                ;;
            "LEFT")
                image_path=$(dirname "$image_path")
                ;;
            "DOWN")
                total_items=$(list_directories_and_files "$image_path" | wc -l)
                ((selected_index++))
                if [ "$selected_index" -gt "$total_items" ]; then
                    selected_index="$total_items"
                fi
                ;;
            "RIGHT")
                selected_file=$(list_directories_and_files "$image_path" | sed -n "${selected_index}p")
                if [ -d "$image_path/$selected_file" ]; then
                    image_path="$image_path/$selected_file"
                    selected_index=1
                else
                    select_file="$selected_file"
                    if [ "${select_file##*.}" = "img" ]; then
                        original_file="$image_path/$select_file" 
                        new_name="$image_path/system.img"
                        rename_image "$image_path/$select_file" "$new_name"
                        perform_resize_and_unshare_blocks || echo "Failed to resize and unshare blocks."
                        rename_image "$new_name" "$original_file"
                        confirm_flash
                        break
                    elif [ "${compressed_file##*.}" != "zip" ] && [ "${compressed_file##*.}" != "tar.gz" ] && [ "${compressed_file##*.}" != "tgz" ] && [ "${compressed_file##*.}" != "tar.xz" ]; then
                        echo "Unsupported file format: $compressed_file"
                        continue
                    else
                        extract_image_from_archive "$image_path/$compressed_file"
                        break
                    fi
                fi
                ;;
        esac

        if [ "$selected_index" -lt 1 ]; then
            selected_index=1
        fi
    done
}

perform_copied_system_image() {
    cp "$device_mapper_path" "/sdcard/system.img"

    perform_resize_and_unshare_blocks || echo "Failed to copy system image and resize/unshare blocks."
    dd if="/sdcard/system.img" of="$device_mapper_path"
}

echo -e "\e[1m\e[3m
          ____ ____ ___
         / ___/ ___|_ _|     _ ____      __
        | |  _\___ \| |_____| '__\ \ /\ / /
        | |_| |___) | |_____| |   \ V  V /
         \____|____/___|    |_|    \_/\_/  
\e[0m"
echo ""
echo "Select an option:"
echo "1. Process the user-selected image."
echo "2. Process a copy of the installed system image."
echo " "
echo -n "Choose one of the 2 options:"
read -rsn4 option

if [ -z "$option" ] || [ "$option" = "." ]; then
   option="1"
fi

case $option in
    1)
        process_user_selected_image
        ;;
    2)
        perform_copied_system_image
        ;;
    *)
        echo "Invalid option."
esac
